@use "sass:list";

@use "base/sizing";
@use "base/colors";

$xs-main-margin: sizing.$margin-sm;

// grid definition; see .grid-base for usage
@function named-grid-columns(
  $sizes,
  $primary,
  $primary-full: (),
  $secondary: (),
  $secondary-full: ()
) {
  @if list.length($sizes) != 6 {
    @error "expected 6 column sizes, got #{list.length($sizes)}: #{$sizes}";
  }

  $tracks: [outer-left] [] [] [] [] [] [outer-right];

  // primary
  $tracks: add-track-range($tracks, $primary, primary);

  @for $i from list.nth($primary, 1) + 1 to list.nth($primary, 2) {
    $tracks: add-track-name($tracks, $i, primary-inner);
  }

  // primary-full
  @if list.length($primary-full) == 0 {
    $primary-full: $primary;
  }

  $tracks: add-track-range($tracks, $primary-full, primary-full);

  // secondary
  @if list.length($secondary) == 0 {
    $p: list.nth($primary, 1);
    $secondary: ($p - 1) $p;
  }

  $tracks: add-track-range($tracks, $secondary, secondary);

  // secondary-full
  @if list.length($secondary-full) == 0 {
    $secondary-full: $secondary;
  }

  $tracks: add-track-range($tracks, $secondary-full, secondary-full);

  $out: ();
  @each $pair in list.zip($tracks, $sizes) {
    $out: list.join($out, $pair, $separator: space);
  }

  $out: list.append($out, list.nth($tracks, list.length($tracks)));
  @return $out;
}

@function add-track-name($tracks, $index, $name) {
  @return list.set-nth(
    $tracks,
    $index,
    list.append(list.nth($tracks, $index), $name)
  );
}

@function add-track-range($tracks, $range, $name) {
  @if list.length($range) != 2 {
    @error "expected #{$name} column indices, got #{$range}";
  }

  $tracks: add-track-name($tracks, list.nth($range, 1), #{$name}-start);
  $tracks: add-track-name($tracks, list.nth($range, 2), #{$name}-end);

  @return $tracks;
}

@mixin content-longform {
  .content-longform &:not(.content-longform-override--false),
  &.content-longform-override--true {
    @content;
  }
}

// The container is a top-level element wrapper within the body.
// The normalize stylesheet ensures there's no body margin.
.container {
  box-sizing: border-box;
  padding-top: sizing.$eighth-grid;
  min-height: 100vh;
}

// Base definition for the layout grid
//
// The grid is defined with 6 columns, of which up to three columns on the
// outside may be empty.
//
// In the `xs` layout all space is allocated to a single column, with margins
// excepted. In the `sm` layout two fixed-sized columns are available. On larger
// screens, where there are at least three columns available, a column to the
// left of centre is allocated for secondary content, followed by two to three
// columns for primary content.
//
// Given longform content, in the `md` layout, where there are between 3 and 4
// columns available, the rightmost two complete columns, which contain the
// longform content, are centred.
//
// There are four named track ranges: `primary`, `secondary`, `primary-full`,
// and `secondary-full`. The `secondary` area has the same value as `primary` up
// to the `md` breakpoint. Below the `md` breakpoint the `-full` areas are
// full-bleed; above that point they are the same as primary and secondary.
//
// Any tracks between primary columns are named `primary-inner`.
.grid-base {
  display: grid;
  grid-template-columns: named-grid-columns(
    $sizes: 0 $xs-main-margin minmax(150px, auto) $xs-main-margin 0 0,
    $primary: 3 4,
    $secondary: 3 4,
    $primary-full: 2 5,
    $secondary-full: 2 5
  );

  @media (min-width: sizing.$screen-sm-min) {
    grid-template-columns: named-grid-columns(
      $sizes: 0 1fr sizing.$grid sizing.$grid 1fr 0,
      $primary: 3 5,
      $secondary: 3 5,
      $primary-full: 2 6,
      $secondary-full: 2 6
    );
  }

  @media (min-width: sizing.$screen-md-min) {
    grid-template-columns: named-grid-columns(
      $sizes: 1fr sizing.$grid sizing.$grid sizing.$grid 1fr 0,
      $primary: 3 5
    );

    @include content-longform {
      grid-template-columns: named-grid-columns(
        $sizes: 0 1fr sizing.$grid sizing.$grid 1fr 0,
        $primary: 3 5
      );
    }
  }

  @media (min-width: sizing.$screen-lg-min) {
    grid-template-columns: named-grid-columns(
      $sizes: 1fr sizing.$grid sizing.$grid sizing.$grid sizing.$grid 1fr,
      $primary: 3 6
    );
  }
}

// Background support
//
// The background is defined on the before and after pseudo elements to allow
// CSS grid to be used to position the start and end, avoiding having the
// background cover the primary area.
.container-underlay {
  position: fixed;

  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  // Safari seems to require fixed size (not 1fr, 100%, etc.) in order to occupy
  // the full space pinned between top and bottom
  grid-auto-rows: 100vh;

  z-index: -1;

  box-sizing: border-box;

  &::before {
    grid-column: outer-left / primary-start;
    background: right (-(sizing.$grid - 1px)) center repeat;
  }

  &::after {
    grid-column: primary-end / outer-right;
    background: left center repeat;
  }

  &::before,
  &::after {
    background-image: url("../buildtime-assets/img/grid-bg-line-start.svg");
    content: " ";
  }

  // stylelint-disable-next-line order/order
  @include content-longform {
    &::before,
    &::after {
      background: none;
    }

    &::before {
      border-right: 1px solid colors.$complement;
    }
  }
}
