name: Check merge and deploy
on:
  workflow_run:
    workflows: ["Build and test"]
    types: [completed]

  pull_request_target:
    types: [labeled, ready_for_review]

  pull_request_review:
    types: [submitted, edited]

jobs:
  check-merge-deploy:
    name: Check merge and deploy eligibility
    runs-on: ubuntu-18.04

    if: >
      ${{ github.eventName != 'workflow_run' ||
          github.event.workflow_run.event == 'pull_request' ||
          (github.event.workflow_run.event == 'push' &&
           github.context.ref == 'refs/heads/develop') }}

    env:
      # See comment in validate.yml
      BASH_ENV: ci/env.sh

    steps:
      - name: Configure git
        run: |
          git config --global user.email "bain.william.a+ci@gmail.com"
          git config --global user.name "CI"

      - uses: actions/checkout@v2

      # Required for github-script actions below
      - uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps
        with:
          dependencies: |
            tree
            jq

      - name: Resolve inputs
        id: resolve
        uses: actions/github-script@v4
        with:
          script: await require('./ci/check-merge-deploy/resolve-params.js')({ context, github })

      - name: Download workflow artifacts
        id: artifact-download
        uses: actions/github-script@v4
        if: ${{ steps.resolve.workflow_run != null }}
        env:
          WORKSPACE: ${{ github.workspace }}
          WORKFLOW_RUN_ID: ${{ steps.resolve.workflow_run }}
        with:
          script: await require('./ci/check-merge-deploy/download.js')({ context, github })

      - name: Extract
        if: ${{ steps.artifact-download.outputs.deploy_path != null }}
        env:
          PATH: ${{ steps.artifact-download.outputs.deploy_path }}
          BASE_DIR: ${{ github.workspace }}
        run: |
          set -euo pipefail

          unzip "$PATH" -d "$BASE_DIR"
          tar -xzf "$BASE_DIR"/site.tgz -C "$BASE_DIR"

          tree "$BASE_DIR"

      - name: Fetch merge ref
        if: ${{ steps.resolve.outputs.effective_event == 'pull_request' }}
        env:
          PR_NUMBER: ${{ steps.resolve.outputs.pr_number }}
        run: |
          git fetch --no-tags --depth=2 origin \
            "+refs/pull/$PR_NUMBER/head:refs/remotes/origin/pull/$PR_NUMBER/head"

      - name: Evaluate pull request merge eligibility
        id: pr-eval
        if: ${{ steps.resolve.outputs.effective_event == 'pull_request' }}
        env:
          CONCLUSION: ${{ steps.resolve.outputs.conclusion }}
          PR_NUMBER: ${{ steps.resolve.outputs.pr_number }}

          RUN_HEAD_SHA: ${{ steps.resolve.outputs.head_sha }}
          RUN_BASE_SHA: ${{ steps.resolve.outputs.base_sha }}

          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: |
          pr="$(bin/ci-evaluate-pr.sh)"

          echo "PR attributes:"
          echo "$pr" | jq -C

          echo "::set-output name=eval::$pr"

          # Add labels before checking for staleness in order to ensure the PR
          # shows up in the maintenance cron job's check
          if [[ "$(echo "$pr" | jq '.pr_may_be_eligible')" == "true" && "$CONCLUSION" == success ]]; then
            if [[ "$(echo "$pr" | jq '.merge_pending_label_present')" == "false" ]]; then
              bin/ci-update-pr-label.sh "$PR_NUMBER" add merge-pending
            fi
          elif [[ "$(echo "$pr" | jq '.merge_pending_label_present')" == "true" ]]; then
            bin/ci-update-pr-label.sh "$PR_NUMBER" del merge-pending
          fi

          head_ref="$(echo "$pr" | jq -r '.head_ref')"
          head_sha="$(echo "$pr" | jq -r '.head_comit')"
          base_sha="$(echo "$pr" | jq -r '.base_commit')"
          merge_commit="$(echo "$pr" | jq -r '.merge_commit')"

          effective_merge_commit="$(git rev-parse refs/remotes/origin/pull/$PR_NUMBER/head)"

          if [[ "$head_sha" != "$RUN_HEAD_SHA" || "$base_sha" != "$RUN_BASE_SHA" ]]; then
            echo "Run is stale (commit under test: $RUN_HEAD_SHA into $RUN_BASE_SHA,"
            echo "$head_ref merge: $merge_commit of $head_sha into $base_sha)"
            echo '::set-output name=stale::true'
            exit
          fi

          if [[ "$merge_commit" != "$effective_merge_commit" ]]; then
            echo "PR data is stale (got merge $effective_merge_commit, expected $head_ref merge $merge_commit)"
            echo '::set-output name=stale::true'
            exit
          fi

          echo '::set-output name=stale::false'

      - name: Push eligible refs
        id: push-refs
        if: >
          ${{
            steps.resolve.workflow_run != null &&
              steps.resolve.conclusion == 'success' &&
              (steps.pr-eval.outcome == 'skipped' || steps.pr-eval.outputs.stale == 'false')
          }}
        env:
          CI_DRY_RUN: "true"
          BASE_DIR: ${{ github.workspace }}
          EFFECTIVE_EVENT: ${{ steps.resolve.outputs.effective_event }}
          PR_NUMBER: ${{ steps.resolve.outputs.pr_number }}
          HEAD_REF: ${{ steps.resolve.outputs.head_ref }}
          BASE_REF: ${{ steps.resolve.outputs.base_ref }}
          PR_EVAL: ${{ steps.pr-eval.outputs.eval }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: bin/ci-push.sh

      - name: "Post-push: Clear pull request merge-pending label"
        # Note: breaking the condition across multiple lines seemed to cause the
        # step to always run
        if: ${{ always() && steps.push-refs.outcome == 'success' && fromJSON(steps.pr-eval.outputs.eval).pr_is_eligible }}
        continue-on-error: true
        env:
          PR_NUMBER: ${{ steps.resolve.outputs.pr_number }}
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
        run: bin/ci-update-pr-label.sh "$PR_NUMBER" del merge-pending
