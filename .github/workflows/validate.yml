# Name referenced in .github/workflows/check-merge-deploy.yml
name: Build and test
on:
  push:
    branches-ignore: master
  pull_request: {}
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: Number of the pull request targeted by a workflow dispatch job
        default: ""

jobs:
  params:
    name: Resolve run parameters
    runs-on: ubuntu-22.04

    env:
      # Use a default rcfile. GitHub Actions prefers an incremental update model
      # to environment setup where environment changes are written to $GITHUB_ENV
      # or $GITHUB_PATH, but unless dynamic variables really need to be propagated
      # everywhere a fixed rcfile provides more flexibility without the incidental
      # lock-in.
      BASH_ENV: ci/env.sh

    outputs:
      effective_event: ${{ steps.resolve.outputs.effective_event }}
      ref: ${{ steps.resolve.outputs.ref }}
      head_ref: ${{ steps.resolve.outputs.head_ref }}
      base_ref: ${{ steps.resolve.outputs.base_ref }}
      pr_number: ${{ steps.resolve.outputs.pr_number }}

    steps:
      - name: Resolve dispatched pull request
        id: dispatched-pr
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.pull_request_number != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
        run: |
          set -euo pipefail

          curl --silent --show-error --fail \
              -H "Authorization: token $GH_TOKEN" \
              -H 'Accept: application/vnd.github.v3+json' \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/pulls/$(jq -nr '@uri "\(env.PR_NUMBER)"')" |
              jq -r '
                if .head.ref != (env.GITHUB_REF | sub("^refs/heads/"; "")) then
                  error("Ref mismatch: dispatched with \(env.GITHUB_REF), PR has \(.head.ref)")
                elif .mergeable == false then
                  error("PR \(env.PR_NUMBER) at \(.head.sha) cannot be merged with \(.base.sha)")
                elif .mergeable == null then
                  # TODO: Poll until this changes?
                  error("PR \(env.PR_NUMBER) mergeability not yet determined at \(.head.sha) with \(.base.sha)")
                else
                  [
                    "ref=refs/pull/\(env.PR_NUMBER)/merge",
                    "head_ref=\(.head.ref)",
                    "base_ref=\(.base.ref)"
                  ] | join("\n")
                end
              ' |
              tee -a "$GITHUB_OUTPUT"

      # Currently it isn't possible to trigger a rerun of a pull request job
      # through the API, so we implement some manual indirection over the
      # workflow_dispatch event.
      #
      # Use the outputs of this step as follows:
      #
      # - effective_event: replaces github.event_name, will be 'pull_request' for
      #   for workflow_dispatch jobs which trigger pull request logic
      #
      # - ref: replaces github.ref / $GITHUB_REF
      #
      #   If effective_event != 'pull_request' then ref will be equivalent to
      #   github.ref. When processing pull requests, use HEAD instead of github.sha /
      #   $GITHUB_SHA.
      #
      # - head_ref: replaces github.head_ref
      #
      # - base_ref: replaces github.base_ref
      #
      # - pr_number: replaces github.event.pull_request.number
      - name: Resolve parameters
        id: resolve
        env:
          DISPATCHED_PR_OUTCOME: ${{ steps.dispatched-pr.outcome }}
          EVENT_NAME: ${{ github.event_name }}
          GH_HEAD_REF: ${{ github.head_ref }}
          GH_BASE_REF: ${{ github.base_ref }}
          GH_PR_NUMBER: ${{ github.event.pull_request.number }}
          DISPATCHED_REF: ${{ steps.dispatched-pr.outputs.ref }}
          DISPATCHED_HEAD_REF: ${{ steps.dispatched-pr.outputs.head_ref }}
          DISPATCHED_BASE_REF: ${{ steps.dispatched-pr.outputs.base_ref }}
          DISPATCHED_PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
        run: |
          set -euo pipefail

          case "$DISPATCHED_PR_OUTCOME" in
          success)
            echo "effective_event=pull_request" | tee -a "$GITHUB_OUTPUT"
            echo "ref=$DISPATCHED_REF" | tee -a "$GITHUB_OUTPUT"
            echo "head_ref=$DISPATCHED_HEAD_REF" | tee -a "$GITHUB_OUTPUT"
            echo "base_ref=$DISPATCHED_BASE_REF" | tee -a "$GITHUB_OUTPUT"
            echo "pr_number=$DISPATCHED_PR_NUMBER" | tee -a "$GITHUB_OUTPUT"
            ;;
          skipped)
            echo "effective_event=$EVENT_NAME" | tee -a "$GITHUB_OUTPUT"
            echo "ref=$GITHUB_REF" | tee -a "$GITHUB_OUTPUT"
            echo "head_ref=$GH_HEAD_REF" | tee -a "$GITHUB_OUTPUT"
            echo "base_ref=$GH_BASE_REF" | tee -a "$GITHUB_OUTPUT"
            echo "pr_number=$GH_PR_NUMBER" | tee -a "$GITHUB_OUTPUT"
            ;;
          *)
            echo "::error ::Unexpected prereq outcome: $DISPATCHED_PR_OUTCOME"
            exit 1
          esac

  build:
    needs: params
    uses: ./.github/workflows/build-test.yml

    with:
      ref: ${{ needs.params.outputs.ref }}
      base_ref: ${{ needs.params.outputs.base_ref }}

      archive_artifacts: ${{
        needs.params.outputs.effective_event == 'pull_request' ||
        (needs.params.outputs.effective_event == 'push' &&
        needs.params.outputs.ref == 'refs/heads/develop')
        }}

  workflow-dispatch-notify:
    needs: [params, build]
    if: >
      failure() &&
        needs.params.outputs.effective_event == 'pull_request' &&
        github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    steps:
      # For workflow_dispatch events there's no obvious indicator of a failure
      # within the pull request, so add a comment
      - name: "Post-run: Add pull request comment on failure"
        continue-on-error: true
        env:
          PR_NUMBER: ${{ needs.params.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

          curl --silent --show-error --fail -XPOST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
            -d "$(jq -n '{ body: "A [build/test job] dispatched for this pull request failed.\n\n[job]: \(env.URL)" }')"
