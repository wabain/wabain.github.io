name: Merge and deploy if eligible
run-name: Merge and deploy ${{ inputs.head_ref }} on ${{ inputs.effective_event }} (${{ inputs.pull_request_number }}${{ inputs.push_commit }})
on:
  workflow_call:
    inputs:
      workflow_run_id:
        description: "The ID of the workflow run whose output should be deployed"
        type: number
        required: true

      effective_event:
        description: "The type of event associated with the deployment (one of push or pull_request)"
        required: true
        type: string

      pull_request_number:
        description: "The number of the pull request, if and only if effective_event is pull_request"
        required: false
        type: number

      head_ref:
        description: "The branch to be merged, or the branch which was pushed to for push events"
        required: true
        type: string

      base_ref:
        description: "The branch to merge into, or the branch which was pushed to for push events"
        required: true
        type: string

      push_commit:
        description: "The SHA of the pushed commit for push events"
        required: false
        type: string

jobs:
  check-merge-deploy:
    name: Merge and deploy using artifact
    runs-on: ubuntu-22.04

    env:
      # See comment in validate.yml
      BASH_ENV: ci/env.sh

    steps:
      - name: Validate inputs
        env:
          effective_event: ${{ inputs.effective_event }}
          pull_request_number: ${{ inputs.pull_request_number }}
          head_ref: ${{ inputs.head_ref }}
          base_ref: ${{ inputs.base_ref }}
          push_commit: ${{ inputs.push_commit }}
          TARGET_REF: develop
        run: |
          set -euo pipefail

          case "$effective_event" in
          pull_request)
            if [ -z "$pull_request_number" ]; then
              echo '::error ::Missing pull_request_number input'
              exit 1
            fi

            if ! [ -z "$push_commit" ]; then
              echo "::error ::Unexpected push_commit input for pull_request event ($push_commit)"
              exit 1
            fi

            ;;
          push)
            if [[ "$head_ref" != "$TARGET_REF" ]]; then
              echo "::error ::Can only deploy on push when targeting $TARGET_REF (got $head_ref)"
              exit 1
            fi

            if ! [ -z "$pull_request_number" ]; then
              echo "::error ::Unexpected pull_request_number input for push event ($pull_request_number)"
              exit 1
            fi

            if [ -z "$push_commit" ]; then
              echo "::error ::Missing push_commit input"
              exit 1
            fi

            ;;
          *)
            if ! [ -z "$pull_request_number" ]; then
              echo "::error ::Unexpected effective_event input ($effective_event)"
              exit 1
            fi
          esac

          if [[ "$base_ref" != "$TARGET_REF" ]]; then
            echo "::error ::Can only deploy changes targeting $TARGET_REF (got $base_ref)"
            exit 1
          fi

      - name: Configure git
        run: |
          git config --global user.email "bain.william.a+ci@gmail.com"
          git config --global user.name "CI"

      - uses: actions/checkout@v3

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dependencies: |
            tree
            jq
            sentry-cli
            unzip

      - name: Download workflow artifacts
        id: artifact-download
        uses: actions/github-script@v6
        env:
          WORKSPACE: ${{ github.workspace }}
          WORKFLOW_RUN_ID: ${{ inputs.workflow_run_id }}
        with:
          script: |
            const workflowRunId = JSON.parse(process.env.WORKFLOW_RUN_ID)
            const workspace = process.env.WORKSPACE
            return await require('./ci/check-merge-deploy/download.js')(
              { workflowRunId, workspace },
              { context, github, core },
            )

      - name: Extract
        if: >
          steps.artifact-download.outcome == 'success' &&
            fromJSON(steps.artifact-download.outputs.result).deploy_path != null
        env:
          DEPLOY_PATH: ${{ fromJSON(steps.artifact-download.outputs.result).deploy_path }}
          BASE_DIR: ${{ github.workspace }}
        run: |
          set -euo pipefail

          file "$DEPLOY_PATH"
          unzip "$DEPLOY_PATH" site.tgz site.revisions.json -d "$BASE_DIR"
          tar -xzf "$BASE_DIR"/site.tgz -C "$BASE_DIR" site

          if [ ! -f "$BASE_DIR/site.revisions.json" ]; then
            echo "::warning ::missing site.revisions.json in archive"
          fi

          tree "$BASE_DIR"

      - name: Fetch refs
        env:
          PR_NUMBER: ${{ inputs.pull_request_number }}
          BASE_REF: ${{ inputs.base_ref }}
          HEAD_REF: ${{ inputs.head_ref }}
        run: |
          ensure-ref() {
            local ref="$1"

            if [ ! -z "$ref" ] && ! git rev-parse "$ref" &> /dev/null; then
              git fetch --no-tags --depth=2 origin "+$ref:$ref"
            fi
          }

          if [ ! -z "$PR_NUMBER" ]; then
            ensure-ref "refs/pull/$PR_NUMBER/merge"
          fi

          ensure-ref "$BASE_REF"
          ensure-ref "$HEAD_REF"

          echo "Branches:"
          git branch --list -vv

      - name: Evaluate pull request merge eligibility
        id: pr-eval
        if: inputs.effective_event == 'pull_request'
        env:
          PR_NUMBER: ${{ inputs.pull_request_number }}
          BASE_REF: ${{ inputs.base_ref }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr="$(bin/ci-evaluate-pr.sh)"

          echo "PR attributes:"
          echo "$pr" | jq -C

          echo "eval=$pr" >> "$GITHUB_OUTPUT"

          # Add labels before checking for staleness in order to ensure the PR
          # shows up in the maintenance cron job's check

          if [[ "$(echo "$pr" | jq '.pr_may_be_eligible')" == "true" ]]; then
            if [[ "$(echo "$pr" | jq '.merge_pending_label_present')" == "false" ]]; then
              bin/ci-update-pr-label.sh "$PR_NUMBER" add merge-pending
            fi
          elif [[ "$(echo "$pr" | jq '.merge_pending_label_present')" == "true" ]]; then
            bin/ci-update-pr-label.sh "$PR_NUMBER" del merge-pending
          fi

          # Ensure the revisions used in the job match the revisions found by
          # the PR evaluation

          if [ ! -f "site.revisions.json" ]; then
            echo "No site.revisions.json: treating workflow run as stale"
            echo 'stale=true' >> "$GITHUB_OUTPUT"
            exit
          fi

          echo "Site revisions:"
          jq -C . site.revisions.json

          base_ref_sha="$(git rev-parse "$BASE_REF")"

          rev_comparison="$(
            jq \
            --null-input \
            --argjson pr_eval "$pr" \
            --arg base_ref_sha "$base_ref_sha" \
            --slurpfile run_entries site.revisions.json \
            '
              (
                if ($run_entries | length) == 1 then
                  $run_entries[0]
                else
                  error("revisions file contains multiple JSON records")
                end
              ) as $run |
              [
                { field: "head_ref", run: $run.head_ref, now: $pr_eval.head_ref },
                { field: "base_ref", run: $run.base_ref, now: $pr_eval.base_ref },
                { field: "head_sha", run: $run.head_sha, now: $pr_eval.head_sha },
                { field: "base_ref_sha", run: $run.base_ref_sha, now: $base_ref_sha },
                { field: "merge sha", run: $run.sha, now: $pr_eval.merge_sha }
              ]
            '
          )"

          echo "::group::Revision comparison"
          echo "$rev_comparison" | jq -C .
          echo "::endgroup::"

          stale_records="$(
            jq \
            --null-input \
            --raw-output \
            --argjson cmp "$rev_comparison" \
            '
              [
                $cmp[] |
                  select(.run != .now) |
                  @json "::warning ::\(.field) has changed since run (was \(.run), now \(.now))"
              ] |
              join("\n")
            '
          )"

          if [ ! -z "$stale_records" ]; then
            echo "$stale_records"
            echo 'stale=true' >> "$GITHUB_OUTPUT"
            exit
          fi

          # Ensure the fetched merge commit matches the revision found in the
          # PR evaluation

          eval_merge_commit="$(echo "$pr" | jq -r '.merge_commit')"
          effective_merge_commit="$(git rev-parse refs/pull/$PR_NUMBER/merge)"

          if [[ "$eval_merge_commit" != "$effective_merge_commit" ]]; then
            head_ref="$(echo "$pr" | jq -r '.head_ref')"
            echo "PR data is stale (got merge $effective_merge_commit, expected $head_ref merge $merge_commit)"
            echo 'stale=true' >> "$GITHUB_OUTPUT"
            exit
          fi

          echo 'stale=false' >> "$GITHUB_OUTPUT"

      - name: Resolve release version name
        id: release-version
        env:
          PR_EVAL: ${{ steps.pr-eval.outputs.eval }}
          SHA: ${{ inputs.push_commit }}
        run: |
          if [ ! -z "$PR_EVAL" ]; then
            base_ref_sha="$(git rev-parse "$(echo "$PR_EVAL" | jq --raw-output .base_ref)")"
            tree="$(git rev-parse "$(echo "$PR_EVAL" | jq --raw-output .merge_sha)^{tree}")"

            params="$(
              echo "$PR_EVAL" |
              jq --arg base_ref_sha "$base_ref_sha" --arg tree "$tree" '{ head_sha, $base_ref_sha, $tree }'
            )"
          elif [ ! -z "$SHA" ]; then
            tree="$(git rev-parse "$SHA^{tree}")"

            params="$(
              jq --null-input --arg sha "$SHA" --arg tree "$tree" '{ $sha, $tree }'
            )"
          else
            echo "::error ::Missing expected inputs"
            exit 1
          fi

          name="$(echo $params | jq --raw-output -f ci/release-name.jq)"
          echo "name=$name" >> "$GITHUB_OUTPUT"

          run_name=
          if [ -f site/.test-meta.json ]; then
            run_name="$(jq -r '.release_version' site/.test-meta.json)"
          fi

          if [[ "$name" == "$run_name" ]]; then
            echo "stale=false" >> "$GITHUB_OUTPUT"
          else
            echo "::warning ::Unexpected release version from run"
            echo "::warning ::Expected '$name'"
            echo "::warning ::Run has  '$run_name'"
            echo "stale=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push eligible refs
        id: push-refs
        if: (steps.pr-eval.outcome == 'skipped' || steps.pr-eval.outputs.stale == 'false') && steps.release-version.outputs.stale == 'false'
        env:
          CI_DRY_RUN: "false"
          BASE_DIR: ${{ github.workspace }}
          EFFECTIVE_EVENT: ${{ inputs.effective_event }}
          PR_NUMBER: ${{ inputs.pull_request_number }}
          HEAD_REF: ${{ inputs.head_ref }}
          BASE_REF: ${{ inputs.base_ref }}
          PR_EVAL: ${{ steps.pr-eval.outputs.eval }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
          RELEASE_VERSION: ${{ steps.release-version.outputs.name }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: bin/ci-push.sh

      - name: "Post-push: Clear pull request merge-pending label"
        if: >
          always() &&
            inputs.effective_event == 'pull_request' &&
            steps.push-refs.outcome == 'success' &&
            fromJSON(steps.pr-eval.outputs.eval).pr_is_eligible
        continue-on-error: true
        env:
          PR_NUMBER: ${{ inputs.pull_request_number }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: bin/ci-update-pr-label.sh "$PR_NUMBER" del merge-pending
