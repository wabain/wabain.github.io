name: Merge and deploy if eligible
run-name: Merge and deploy ${{ inputs.head_ref }} on ${{ inputs.effective_event }} (${{ inputs.pull_request_number }}${{ inputs.push_commit }})
on:
  workflow_call:
    inputs:
      workflow_run_id:
        description: "The ID of the workflow run whose output should be deployed"
        type: number
        required: true

      effective_event:
        description: "The type of event associated with the deployment (one of push or pull_request)"
        required: true
        type: string

      pull_request_number:
        description: "The number of the pull request, if and only if effective_event is pull_request"
        required: false
        type: number

      head_ref:
        description: "The branch to be merged, or the branch which was pushed to for push events"
        required: true
        type: string

      base_ref:
        description: "The branch to merge into, or the branch which was pushed to for push events"
        required: true
        type: string

      push_commit:
        description: "The SHA of the pushed commit for push events"
        required: false
        type: string

  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: "The ID of the workflow run whose output should be deployed"
        type: number
        required: true

      effective_event:
        description: "The type of event associated with the deployment (one of push or pull_request)"
        required: true
        type: string

      pull_request_number:
        description: "The number of the pull request, if and only if effective_event is pull_request"
        required: false
        type: number

      head_ref:
        description: "The branch to be merged, or the branch which was pushed to for push events"
        required: true
        type: string

      base_ref:
        description: "The branch to merge into, or the branch which was pushed to for push events"
        required: true
        type: string

      push_commit:
        description: "The SHA of the pushed commit for push events"
        required: false
        type: string

jobs:
  check-merge-deploy:
    name: Merge and deploy using artifact
    runs-on: ubuntu-22.04

    env:
      # See comment in validate.yml
      BASH_ENV: ci/env.sh

    steps:
      - name: Validate inputs
        env:
          effective_event: ${{ inputs.effective_event }}
          pull_request_number: ${{ inputs.pull_request_number }}
          head_ref: ${{ inputs.head_ref }}
          base_ref: ${{ inputs.base_ref }}
          push_commit: ${{ inputs.push_commit }}
          TARGET_REF: develop
        run: |
          set -euo pipefail

          case "$effective_event" in
          pull_request)
            if [ -z "$pull_request_number" ]; then
              echo '::error ::Missing pull_request_number input'
              exit 1
            fi

            if ! [ -z "$push_commit" ]; then
              echo "::error ::Unexpected push_commit input for pull_request event ($push_commit)"
              exit 1
            fi

            ;;
          push)
            if [[ "$head_ref" != "$TARGET_REF" ]]; then
              echo "::error ::Can only deploy on push when targeting $TARGET_REF (got $head_ref)"
              exit 1
            fi

            if ! [ -z "$pull_request_number" ]; then
              echo "::error ::Unexpected pull_request_number input for push event ($pull_request_number)"
              exit 1
            fi

            if [ -z "$push_commit" ]; then
              echo "::error ::Missing push_commit input"
              exit 1
            fi

            ;;
          *)
            if ! [ -z "$pull_request_number" ]; then
              echo "::error ::Unexpected effective_event input ($effective_event)"
              exit 1
            fi
          esac

          if [[ "$base_ref" != "$TARGET_REF" ]]; then
            echo "::error ::Can only deploy changes targeting $TARGET_REF (got $base_ref)"
            exit 1
          fi

      - name: Configure git
        run: |
          git config --global user.email "bain.william.a+ci@gmail.com"
          git config --global user.name "CI"

      - uses: actions/checkout@v3

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dependencies: |
            tree
            jq
            sentry-cli
            unzip

      - name: Download workflow artifacts
        id: artifact-download
        uses: actions/github-script@v6
        env:
          WORKSPACE: ${{ github.workspace }}
          WORKFLOW_RUN_ID: ${{ inputs.workflow_run_id }}
        with:
          script: |
            const workflowRunId = JSON.parse(process.env.WORKFLOW_RUN_ID)
            const workspace = process.env.WORKSPACE
            return await require('./ci/check-merge-deploy/download.js')(
              { workflowRunId, workspace },
              { context, github, core },
            )

      - name: Extract
        if: >
          steps.artifact-download.outcome == 'success' &&
            fromJSON(steps.artifact-download.outputs.result).deploy_path != null
        env:
          DEPLOY_PATH: ${{ fromJSON(steps.artifact-download.outputs.result).deploy_path }}
          BASE_DIR: ${{ github.workspace }}
        run: |
          set -euo pipefail

          file "$DEPLOY_PATH"
          unzip "$DEPLOY_PATH" site.tgz site.revisions.json -d "$BASE_DIR"
          tar -xzf "$BASE_DIR"/site.tgz -C "$BASE_DIR" site

          if [ ! -f "$BASE_DIR/site.revisions.json" ]; then
            echo "::warning ::missing site.revisions.json in archive"
          fi

          tree "$BASE_DIR"

      - name: Push eligible refs
        id: push-refs
        env:
          CI_DRY_RUN: "false"
          BASE_DIR: ${{ github.workspace }}
          EFFECTIVE_EVENT: ${{ inputs.effective_event }}
          PR_NUMBER: ${{ inputs.pull_request_number }}
          HEAD_REF: ${{ inputs.head_ref }}
          BASE_REF: ${{ inputs.base_ref }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          set -euo pipefail

          args=()

          [[ "$CI_DRY_RUN" != false ]] && args+=( --dry-run )
          [ ! -z "$PR_NUMBER" ] && args+=( --pr-number "$PR_NUMBER" )
          [ -e "$BASE_DIR/site" ] && args+=( --deploy-dir "$BASE_DIR/site" )
          [ -f "$BASE_DIR/site.revisions.json" ] && args+=( --deploy-revision-info "$BASE_DIR/site.revisions.json" )

          bin/ci-tools deploy-commit \
            "${args[@]}" \
            --effective-event "$EFFECTIVE_EVENT" \
            --base-ref "$BASE_REF" \
            --head-ref "$HEAD_REF" \
            --run-url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            --outputs-file "$GITHUB_OUTPUT"

      - name: "Post-push: Clear pull request merge-pending label"
        if: >
          always() &&
            inputs.effective_event == 'pull_request' &&
            steps.push-refs.outcome == 'success' &&
            fromJSON(steps.push-refs.outputs.pr_eval).pr_is_eligible &&
            steps.push-refs.outputs.stale == 'false'
        continue-on-error: true
        env:
          PR_NUMBER: ${{ inputs.pull_request_number }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: bin/ci-update-pr-label.sh "$PR_NUMBER" del merge-pending
