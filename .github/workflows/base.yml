name: Build and test
on: [push, pull_request]

jobs:
  validate:
    name: Validate commit
    runs-on: ubuntu-18.04

    env:
      # Use a default rcfile. GitHub Actions prefers an incremental update model
      # to environment setup where environment changes are written to $GITHUB_ENV
      # or $GITHUB_PATH, but unless dynamic variables really need to be propagated
      # everywhere a fixed rcfile provides more flexibility without the incidental
      # lock-in.
      BASH_ENV: ci/env.sh

    steps:
      - uses: actions/checkout@v2

      - name: Install system dependencies
        uses: ./.github/actions/install-system-deps
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Repopulate Ruby gem cache
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-bundle-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-bundle-

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Repopulate Yarn package cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages
        run: |
          bundle install --jobs=3 --retry=3 --deployment
          yarn install --frozen-lockfile

      - name: Configure git
        run: |
          git config --global user.email "bain.william.a+ci@gmail.com"
          git config --global user.name "CI"

      - name: Lint and build
        run: |
          yarn run lint-build-infra
          JEKYLL_ENV=production yarn run pre-jekyll
          JEKYLL_ENV=production yarn run jekyll-build
          JEKYLL_ENV=production yarn run jekyll-lint

      - name: Create deploy tarfile
        id: create-deploy-tarfile
        run: |
          tar -c -z --null --verbatim-files-from \
            --verbose --show-transformed-names \
            --transform='s,^_site/,site/,' \
            --files-from=<(git ls-files -z --others --exclude-from=.deploy-gitignore _site) \
            -f site.tgz

      - name: Test
        run: bin/ci-run-integration-tests.sh

      - name: Test CI infra
        run: ci/pull-request/test/tests.sh

      - name: Upload deploy artifact
        if: ${{ steps.create-deploy-tarfile.outcome == 'success' }}
        uses: actions/upload-artifact@v2
        with:
          name: site.tgz
          path: site.tgz
